{"version":3,"sources":["views/DashBoard/index.js"],"names":["index","initChart","myChart","echarts","init","amountChart","current","readingAmount","then","resp","console","log","setOption","title","text","tooltip","xAxis","data","amount","map","ele","month","yAxis","series","name","type","value","finally","setState","isloading","createRef","state","this","style","background","padding","bordered","gutter","className","span","spinning","ref","height","Component"],"mappings":"0UAKqBA,E,YACnB,aAAe,IAAD,8BACZ,+CAOFC,UAAY,WACV,IAAMC,EAAUC,IAAQC,KAAK,EAAKC,YAAYC,SAE9CC,cACGC,MAAK,SAACC,GACLC,QAAQC,IAAI,OAAQF,GACpBP,EAAQU,UAAU,CAChBC,MAAO,CACLC,KAAM,oCAERC,QAAS,GACTC,MAAO,CACLC,KAAMR,EAAKS,OAAOC,KAAI,SAACC,GACrB,OAAOA,EAAIC,UAGfC,MAAO,GACPC,OAAQ,CACN,CACEC,KAAM,eACNC,KAAM,MACNR,KAAMR,EAAKS,OAAOC,KAAI,SAACC,GACrB,OAAOA,EAAIM,gBAMpBC,SAAQ,WACL,EAAKC,SAAS,CACVC,WAAU,QApCpB,EAAKxB,YAAcyB,sBACnB,EAAKC,MAAQ,CACXF,WAAW,GAJD,E,iFA6CZG,KAAK/B,c,+BAIL,IAAMgC,EAAQ,CAAEC,WAAY,UAAWC,QAAS,SAEhD,OACE,oCACE,uBAAMtB,MAAM,YAAYuB,UAAU,GAChC,uBAAKC,OAAQ,IACX,uBAAKC,UAAU,aAAaC,KAAM,GAChC,yBAAKN,MAAOA,GAAZ,UAEF,uBAAKK,UAAU,aAAaC,KAAM,GAChC,yBAAKN,MAAOA,GAAZ,UAEF,uBAAKK,UAAU,aAAaC,KAAM,GAChC,yBAAKN,MAAOA,GAAZ,UAEF,uBAAKK,UAAU,aAAaC,KAAM,GAChC,yBAAKN,MAAOA,GAAZ,YAIN,uBAAMpB,MAAM,iBAAiBuB,UAAU,GACrC,uBAAMI,SAAUR,KAAKD,MAAMF,WACzB,yBAAKY,IAAKT,KAAK3B,YAAa4B,MAAO,CAAES,OAAQ,kB,GAxEtBC,c","file":"static/js/15.35d1b832.chunk.js","sourcesContent":["import React, { Component, createRef } from \"react\";\r\nimport echarts from \"echarts\";\r\nimport { Card, Row, Col, Divider, Spin } from \"antd\";\r\nimport \"./dashboard.less\";\r\nimport { readingAmount } from \"../../requests\";\r\nexport default class index extends Component {\r\n  constructor() {\r\n    super();\r\n    this.amountChart = createRef();\r\n    this.state = {\r\n      isloading: true,\r\n    };\r\n  }\r\n\r\n  initChart = () => {\r\n    const myChart = echarts.init(this.amountChart.current);\r\n\r\n    readingAmount()\r\n      .then((resp) => {\r\n        console.log(\"resp\", resp);\r\n        myChart.setOption({\r\n          title: {\r\n            text: \"ECharts 入门示例\",\r\n          },\r\n          tooltip: {},\r\n          xAxis: {\r\n            data: resp.amount.map((ele) => {\r\n              return ele.month;\r\n            }),\r\n          },\r\n          yAxis: {},\r\n          series: [\r\n            {\r\n              name: \"销量\",\r\n              type: \"bar\",\r\n              data: resp.amount.map((ele) => {\r\n                return ele.value;\r\n              }),\r\n            },\r\n          ],\r\n        });\r\n      })\r\n      .finally(()=>{\r\n          this.setState({\r\n              isloading:false\r\n          })\r\n      });\r\n    // 绘制图表\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.initChart();\r\n  }\r\n\r\n  render() {\r\n    const style = { background: \"#0092ff\", padding: \"8px 0\" };\r\n\r\n    return (\r\n      <>\r\n        <Card title=\"Dashboard\" bordered={false}>\r\n          <Row gutter={16}>\r\n            <Col className=\"gutter-row\" span={6}>\r\n              <div style={style}>col-6</div>\r\n            </Col>\r\n            <Col className=\"gutter-row\" span={6}>\r\n              <div style={style}>col-6</div>\r\n            </Col>\r\n            <Col className=\"gutter-row\" span={6}>\r\n              <div style={style}>col-6</div>\r\n            </Col>\r\n            <Col className=\"gutter-row\" span={6}>\r\n              <div style={style}>col-6</div>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n        <Card title=\"Reading amount\" bordered={false}>\r\n          <Spin spinning={this.state.isloading}>\r\n            <div ref={this.amountChart} style={{ height: \"400px\" }}>\r\n          </div>\r\n          </Spin>\r\n        </Card>\r\n      </>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}